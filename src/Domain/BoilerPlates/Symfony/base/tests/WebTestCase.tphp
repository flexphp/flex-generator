<?php declare(strict_types=1);

namespace App\Tests;

use Domain\Tests\DatabaseTrait;
use Domain\User\Gateway\MySQLUserGateway;
use Domain\User\Request\LoginUserRequest;
use Domain\User\UseCase\LoginUserUseCase;
use Domain\User\UserRepository;
use PHPUnit\Framework\Assert as PHPUnit;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase as WebTestCaseSymfony;
use Symfony\Component\BrowserKit\Cookie;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;

abstract class WebTestCase extends WebTestCaseSymfony
{
    use DatabaseTrait;

    /**
     * @var KernelBrowser
     */
    protected $client;

    public function setUp(): void
    {
        parent::setUp();

        $this->client = static::createClient();
        $this->client->followRedirects();
        $this->client->disableReboot();

        $this->createDb();

        $this->connection()->beginTransaction();
    }

    public function tearDown(): void
    {
        if ($this->connection()->isTransactionActive()) {
            $this->connection()->rollBack();
        }

        parent::tearDown();
    }

    public function assertJsonStructure(array $structure = null, $responseData = null)
    {
        if (\is_null($structure)) {
            return $this->assertJson($responseData);
        }

        if (\is_null($responseData)) {
            $responseData = $this->decodeResponseJson();
        }

        foreach ($structure as $key => $value) {
            if (\is_array($value) && $key === '*') {
                PHPUnit::assertIsArray($responseData);

                foreach ($responseData as $responseDataItem) {
                    $this->assertJsonStructure($structure['*'], $responseDataItem);
                }
            } elseif (\is_array($value)) {
                PHPUnit::assertArrayHasKey($key, $responseData);
                $this->assertJsonStructure($structure[$key], $responseData[$key]);
            } else {
                PHPUnit::assertArrayHasKey($value, $responseData);
            }
        }

        return $this;
    }

    /**
     * Validate and return the decoded response JSON.
     *
     * @return array
     */
    public function decodeResponseJson()
    {
        $decodedResponse = \json_decode($this->client->getResponse()->getContent(), true);

        if (\is_null($decodedResponse) || $decodedResponse === false) {
            if ($this->exception) {
                throw $this->exception;
            }
            PHPUnit::fail('Invalid JSON was returned from the route.');
        }

        return $decodedResponse;
    }

    protected function logIn(string $email = 'admin@admin'): void
    {
        $session = self::$container->get('session');

        $response = (new LoginUserUseCase(new UserRepository(new MySQLUserGateway($this->connection()))))->execute(new LoginUserRequest($email));
        $user = $response->user;

        $firewallName = 'main';
        $firewallContext = 'main';

        $token = new UsernamePasswordToken($user, null, $firewallName, $user->getRoles());
        $session->set('_security_' . $firewallContext, \serialize($token));
        $session->save();

        $cookie = new Cookie($session->getName(), $session->getId());

        $this->client->getCookieJar()->set($cookie);
    }

    protected function getCsrfToken(string $id = 'ajax')
    {
        return self::$container->get('security.csrf.token_manager')->getToken($id)->getValue();
    }

    protected function getHeaderCsrfToken(string $id = 'ajax')
    {
        return ['HTTP_X-XSRF-Token' => $this->getCsrfToken($id)];
    }

    protected function getInputCsrfToken(string $id = 'ajax')
    {
        return ['_token' => $this->getCsrfToken($id)];
    }
}
