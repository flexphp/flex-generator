<?php

namespace App\Listener;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\HttpFoundation\Cookie;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
use Symfony\Component\HttpKernel\Event\GetResponseEvent;

class CsrfListener implements EventSubscriberInterface
{
    private $tokenManager;

    public static function getSubscribedEvents()
    {
        return array(
            'kernel.request' => array('onKernelRequest', 1000),
            'kernel.response' => 'onKernelResponse'
        );
    }


    public function __construct(CsrfTokenManagerInterface $tokenManager)
    {
        $this->tokenManager = $tokenManager;
    }

    public function onKernelRequest(GetResponseEvent $event)
    {
        if (in_array($event->getRequest()->getMethod(), array('POST', 'PUT', 'DELETE', 'PATCH')) && $event->getRequest()->isXmlHttpRequest()) {
            if (!$this->tokenManager->isTokenValid(new CsrfToken('ajax', $event->getRequest()->headers->get('X-XSRF-Token')))) {
                $event->setResponse(new JsonResponse(['message' => 'The XSRF token is invalid'], Response::HTTP_PRECONDITION_FAILED));
                return;
            }
        }
    }

    public function onKernelResponse(FilterResponseEvent $event)
    {
        if ($event->getRequest()->isMethod('GET') && !$event->getRequest()->isXmlHttpRequest()) {
            $event->getResponse()->headers->setCookie(new Cookie('XSRF-Token', $this->tokenManager->getToken('ajax'), 0, '/', null, true, false, false, Cookie::SAMESITE_STRICT));
        }
    }
}
