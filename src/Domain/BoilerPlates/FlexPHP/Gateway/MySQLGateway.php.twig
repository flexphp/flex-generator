<?php declare(strict_types=1);

namespace Domain\{{ entity }}\Gateway;

use Domain\{{ entity }}\{{ entity }};
use Domain\{{ entity }}\{{ entity }}Gateway;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Types\Types as DB;

final class MySQL{{ entity }}Gateway implements {{ entity }}Gateway
{
    private $query;
    private $table = '{{ name }}';

    public function __construct(Connection $conn)
    {
        $this->query = $conn->createQueryBuilder();
    }
{% for action in actions %}
{% if action in ['index'] %}

    public function search(array $wheres, array $orders, int $limit): array
    {
        $this->query->select([
{% for id, property in properties %}
            '{{ property.Name }}' => '{{ id }}',
{% endfor %}
        ]);
        $this->query->from($this->table);

        foreach($wheres as $column => $value) {
            if (!$value) {
                continue;
            }

            $this->query->where($column . ' = :' . $column);
            $this->query->setParameter($column, $value);
        }

        $this->query->setMaxResults($limit);

        return $this->query->execute()->fetchAll();
    }
{% elseif action in ['create'] %}

    public function push({{ entity }} ${{ item }}): void
    {
        $this->query->insert($this->table);

{% for id, property in properties %}
        $this->query->setValue('{{ property.Name }}', ':{{ id }}');
{% endfor %}

{% for id, property in properties %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}(), DB::{{ dbTypes[id] }});
{% endfor %}

        $this->query->execute();
    }
{% elseif action in ['read'] %}

    public function get({{ entity }} ${{ item }}): array
    {
        $this->query->select([
{% for id, property in properties %}
            '{{ property.Name }}' => '{{ id }}',
{% endfor %}
        ]);
        $this->query->from($this->table);
        $this->query->where('{{ properties[pkName].Name }} = :{{ pkName }}');
        $this->query->setParameter('{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        $register = $this->query->execute()->fetch();

        return $register ? $register : [];
    }
{% elseif action in ['update'] %}

    public function shift({{ entity }} ${{ item }}): void
    {
        $this->query->update($this->table);

{% for id, property in properties %}
        $this->query->set('{{ property.Name }}', ':{{ id }}');
{% endfor %}

{% for id, property in properties %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}(), DB::{{ dbTypes[id] }});
{% endfor %}

        $this->query->where('{{ properties[pkName].Name }} = :{{ pkName }}');
        $this->query->setParameter('{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        $this->query->execute();
    }
{% elseif action in ['delete'] %}

    public function pop({{ entity }} ${{ item }}): void
    {
        $this->query->delete($this->table);

        $this->query->where('{{ properties[pkName].Name }} = :{{ pkName }}');
        $this->query->setParameter('{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        $this->query->execute();
    }
{% elseif action in ['login'] %}

    public function getBy(string $column, $value): array
    {
        $this->query->select([
{% for id, property in properties %}
            '{{ property.Name }}' => '{{ id }}',
{% endfor %}
        ]);
        $this->query->from($this->table);
        $this->query->where($column . ' = :column');
        $this->query->setParameter('column', $value);

        $data = $this->query->execute()->fetch();

        return is_array($data) ? $data : [];
    }
{% endif %}
{% endfor %}
{% for id,fkRel in fkRels %}

    public function filter{{ fkRel.fnPlural }}(string $term, int $page, int $limit): array
    {
        $this->query->select([
            '{{ fkRel.id }} id',
            '{{ fkRel.text }} text',
        ]);
        $this->query->from('{{ fkRel.table }}');

        $this->query->where('{{ fkRel.text }} like :{{ fkRel.text }}');
        $this->query->setParameter(':{{ fkRel.text }}', "%{$term}%");

        $this->query->setMaxResults($limit);

        return $this->query->execute()->fetchAll();
    }
{% endfor %}
}
