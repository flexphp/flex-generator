<?php declare(strict_types=1);

namespace Domain\{{ entity }}\Gateway;

use Domain\{{ entity }}\{{ entity }};
use Domain\{{ entity }}\{{ entity }}Gateway;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Types\Types as DB;

final class MySQL{{ entity }}Gateway implements {{ entity }}Gateway
{
    private $query;

    public function __construct(Connection $conn)
    {
        $this->query = $conn->createQueryBuilder();
    }
{% for action in actions %}
{% if action == 'index' %}

    public function search(array $wheres, array $orders, int $page, int $limit): array
    {
        $this->query->select([
{% for id, property in properties %}
{% if not property.isBlame %}
            '{{ item }}.{{ property.name }} as {{ id }}',
{% endif %}
{% endfor %}
{% for id, fkRel in fkRels %}
{% if not fkRel.blameBy %}
            '{{ fkRel.pkName }}.{{ fkRel.id }} as `{{ fkRel.pkName }}.{{ fkRel.id }}`',
            '{{ fkRel.pkName }}.{{ fkRel.text }} as `{{ fkRel.pkName }}.{{ fkRel.text }}`',
{% endif %}
{% endfor %}
        ]);
        $this->query->from('`{{ table }}`', '`{{ item }}`');
{% for id, fkRel in fkRels %}
{% if not fkRel.blameBy %}
{% set joinType = fkRel.required ? 'join' : 'leftJoin' %}
        $this->query->{{ joinType }}('`{{ item }}`', '`{{ fkRel.table }}`', '`{{ fkRel.pkName }}`', '{{ item }}.{{ fkRel.pk }} = {{ fkRel.pkName }}.{{ fkRel.id }}');
{% endif %}
{% endfor %}

        foreach($wheres as $column => $value) {
            if ($column === 'page' || !$value) {
                continue;
            }

            $this->query->where("{$column} = :{$column}");
            $this->query->setParameter(":{$column}", $value);
        }

        $this->query->setFirstResult($page ? ($page - 1) * $limit : 0);
        $this->query->setMaxResults($limit);

        return $this->query->execute()->fetchAll();
    }
{% elseif action == 'create' %}

    public function push({{ entity }} ${{ item }}): {{ properties[pkName].typeHint }}
    {
        $this->query->insert('`{{ table }}`');

{% for id, property in properties %}
{% if not property.isAi and not property.isUb %}
        $this->query->setValue('{{ property.name }}', ':{{ id }}');
{% endif %}
{% endfor %}

{% for id, property in properties %}
{% if not property.isAi and not property.isBlameAt and not property.isUb %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}(), DB::{{ dbTypes[id] }});
{% elseif property.isBlameAt %}
        $this->query->setParameter(':{{ id }}', new \DateTime(date('Y-m-d H:i:s')), DB::{{ dbTypes[id] }});
{% endif %}
{% endfor %}

        $this->query->execute();

{% if properties[pkName].isAi %}
        return ({{ properties[pkName].typeHint}})$this->query->getConnection()->lastInsertId();
{% else %}
        return ${{ item }}->{{ pkName }}();
{% endif %}
    }
{% elseif action == 'read' %}

    public function get({{ entity }} ${{ item }}): array
    {
        $this->query->select([
{% for id, property in properties %}
            '{{ item }}.{{ property.name }} as {{ id }}',
{% endfor %}
{% for id, fkRel in fkRels %}
            '{{ fkRel.pkName }}.{{ fkRel.id }} as `{{ fkRel.pkName }}.{{ fkRel.id }}`',
            '{{ fkRel.pkName }}.{{ fkRel.text }} as `{{ fkRel.pkName }}.{{ fkRel.text }}`',
{% endfor %}
        ]);
        $this->query->from('`{{ table }}`', '`{{ item }}`');
{% for id, fkRel in fkRels %}
{% set joinType = fkRel.required ? 'join' : 'leftJoin' %}
        $this->query->{{ joinType }}('`{{ item }}`', '`{{ fkRel.table }}`', '`{{ fkRel.pkName }}`', '{{ item }}.{{ fkRel.pk }} = {{ fkRel.pkName }}.{{ fkRel.id }}');
{% endfor %}
        $this->query->where('{{ item }}.{{ properties[pkName].name }} = :{{ pkName }}');
        $this->query->setParameter(':{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        return $this->query->execute()->fetch() ?: [];
    }
{% elseif action == 'update' %}

    public function shift({{ entity }} ${{ item }}): void
    {
        $this->query->update('`{{ table }}`');

{% for id, property in properties %}
{% if not property.isAi and not property.isCa and not property.isCb %}
        $this->query->set('{{ property.name }}', ':{{ id }}');
{% endif %}
{% endfor %}

{% for id, property in properties %}
{% if not property.isAi and not property.isBlameAt and not property.isCb %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}(), DB::{{ dbTypes[id] }});
{% elseif property.isBlameAt and property.isUa %}
        $this->query->setParameter(':{{ id }}', new \DateTime(date('Y-m-d H:i:s')), DB::{{ dbTypes[id] }});
{% endif %}
{% endfor %}

        $this->query->where('{{ properties[pkName].name }} = :{{ pkName }}');
        $this->query->setParameter(':{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        $this->query->execute();
    }
{% elseif action == 'delete' %}

    public function pop({{ entity }} ${{ item }}): void
    {
        $this->query->delete('`{{ table }}`');

        $this->query->where('{{ properties[pkName].name }} = :{{ pkName }}');
        $this->query->setParameter(':{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        $this->query->execute();
    }
{% elseif action == 'login' %}

    public function getBy(string $column, $value): array
    {
        $this->query->select([
{% for id, property in properties %}
            '{{ property.name }} as {{ id }}',
{% endfor %}
        ]);
        $this->query->from('`{{ table }}`');
        $this->query->where($column . ' = :column');
        $this->query->setParameter(':column', $value);

        $data = $this->query->execute()->fetch();

        return is_array($data) ? $data : [];
    }
{% endif %}
{% endfor %}
{% for id,fkFn in fkFns|filter(v => not v.blameBy) %}

    public function filter{{ fkFn.fnPlural }}(string $term, int $page, int $limit): array
    {
        $this->query->select([
            '{{ fkFn.id }} id',
            '{{ fkFn.text }} text',
        ]);
        $this->query->from('`{{ fkFn.table }}`');

        $this->query->where('{{ fkFn.text }} like :{{ fkFn.text }}');
        $this->query->setParameter(':{{ fkFn.text }}', "%{$term}%");

        $this->query->setMaxResults($limit);

        return $this->query->execute()->fetchAll();
    }
{% endfor %}
}
