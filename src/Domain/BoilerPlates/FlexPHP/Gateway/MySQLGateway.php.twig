{% set fkFnsNoBlame = fkFns|filter(v => not v.blameBy) %}
{% set columnCreatedAt = properties|filter(v => v.isCa) %}
{% set columnUpdatedAt = properties|filter(v => v.isUa) %}
{% set useStatements = [] %}
<?php declare(strict_types=1);

namespace Domain\{{ entity }}\Gateway;

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Types\Types as DB;
{% set useStatements = useStatements|merge(['use Domain\\' ~ entity ~ '\\' ~ entity ~ ';']) %}
{% set useStatements = useStatements|merge(['use Domain\\' ~ entity ~ '\\' ~ entity ~ 'Gateway;']) %}
{% for id,fkFn in fkFnsNoBlame %}
{% set useStatements = useStatements|merge(['use Domain\\' ~ entity ~ '\\Request\\Find' ~ entity ~ fkFn.fnSingular ~ 'Request;']) %}
{% endfor %}
{% if useStatements|length > 0 %}
{{ useStatements|sort|join("\n") }}
{% endif %}

final class MySQL{{ entity }}Gateway implements {{ entity }}Gateway
{
    private $conn;

    public function __construct(Connection $conn)
    {
        $this->conn = $conn;
    }
{% for action in actions %}
{% if action == 'index' %}

    public function search(array $wheres, array $orders, int $page, int $limit): array
    {
        $query = $this->conn->createQueryBuilder();

        $query->select([
{% for id, property in properties %}
{% if not property.isBlame %}
            '{{ item }}.{{ property.name }} as {{ id }}',
{% endif %}
{% endfor %}
{% for id, fkRel in fkRels %}
{% if not fkRel.blameBy %}
            '{{ fkRel.pkName }}.{{ fkRel.id }} as `{{ fkRel.pkName }}.{{ fkRel.id }}`',
            '{{ fkRel.pkName }}.{{ fkRel.text }} as `{{ fkRel.pkName }}.{{ fkRel.text }}`',
{% endif %}
{% endfor %}
        ]);
        $query->from('`{{ table }}`', '`{{ item }}`');
{% for id, fkRel in fkRels %}
{% if not fkRel.blameBy %}
{% set joinType = fkRel.required ? 'join' : 'leftJoin' %}
        $query->{{ joinType }}('`{{ item }}`', '`{{ fkRel.table }}`', '`{{ fkRel.pkName }}`', '{{ item }}.{{ fkRel.pk }} = {{ fkRel.pkName }}.{{ fkRel.id }}');
{% endif %}
{% endfor %}

{% for id, property in properties %}
{% if property.isPk and columnCreatedAt|length == 0 and columnUpdatedAt|length == 0 %}
{% if property.isAi %}
        $query->orderBy('{{ item }}.{{ property.name }}', 'DESC');
{% else %}
        $query->orderBy('{{ item }}.{{ property.name }}', 'ASC');
{% endif %}
{% elseif columnUpdatedAt|length == 0 and property.isCa %}
        $query->orderBy('{{ item }}.{{ property.name }}', 'DESC');
{% elseif property.isUa %}
        $query->orderBy('{{ item }}.{{ property.name }}', 'DESC');
{% endif %}
{% endfor %}

        foreach($wheres as $column => $value) {
            if ($column === 'page' || !$value) {
                continue;
            }

            $query->where("{$column} = :{$column}");
            $query->setParameter(":{$column}", $value);
        }

        $query->setFirstResult($page ? ($page - 1) * $limit : 0);
        $query->setMaxResults($limit);

        return $query->execute()->fetchAll();
    }
{% elseif action == 'create' %}

    public function push({{ entity }} ${{ item }}): {{ properties[pkName].typeHint }}
    {
        $query = $this->conn->createQueryBuilder();

        $query->insert('`{{ table }}`');

{% for id, property in properties %}
{% if not property.isAi and not property.isUb %}
        $query->setValue('{{ property.name }}', ':{{ id }}');
{% endif %}
{% endfor %}

{% for id, property in properties %}
{% if not property.isAi and not property.isBlameAt and not property.isUb %}
        $query->setParameter(':{{ id }}', ${{ item }}->{{ id }}(), DB::{{ dbTypes[id] }});
{% elseif property.isBlameAt %}
        $query->setParameter(':{{ id }}', new \DateTime(date('Y-m-d H:i:s')), DB::{{ dbTypes[id] }});
{% endif %}
{% endfor %}

        $query->execute();

{% if properties[pkName].isAi %}
        return ({{ properties[pkName].typeHint}})$query->getConnection()->lastInsertId();
{% else %}
        return ${{ item }}->{{ pkName }}();
{% endif %}
    }
{% elseif action == 'read' %}

    public function get({{ entity }} ${{ item }}): array
    {
        $query = $this->conn->createQueryBuilder();

        $query->select([
{% for id, property in properties %}
            '{{ item }}.{{ property.name }} as {{ id }}',
{% endfor %}
{% for id, fkRel in fkRels %}
            '{{ fkRel.pkName }}.{{ fkRel.id }} as `{{ fkRel.pkName }}.{{ fkRel.id }}`',
            '{{ fkRel.pkName }}.{{ fkRel.text }} as `{{ fkRel.pkName }}.{{ fkRel.text }}`',
{% endfor %}
        ]);
        $query->from('`{{ table }}`', '`{{ item }}`');
{% for id, fkRel in fkRels %}
{% set joinType = fkRel.required ? 'join' : 'leftJoin' %}
        $query->{{ joinType }}('`{{ item }}`', '`{{ fkRel.table }}`', '`{{ fkRel.pkName }}`', '{{ item }}.{{ fkRel.pk }} = {{ fkRel.pkName }}.{{ fkRel.id }}');
{% endfor %}
        $query->where('{{ item }}.{{ properties[pkName].name }} = :{{ pkName }}');
        $query->setParameter(':{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        return $query->execute()->fetch() ?: [];
    }
{% elseif action == 'update' %}

    public function shift({{ entity }} ${{ item }}): void
    {
        $query = $this->conn->createQueryBuilder();

        $query->update('`{{ table }}`');

{% for id, property in properties %}
{% if not property.isAi and not property.isCa and not property.isCb %}
        $query->set('{{ property.name }}', ':{{ id }}');
{% endif %}
{% endfor %}

{% for id, property in properties %}
{% if not property.isAi and not property.isBlameAt and not property.isCb %}
        $query->setParameter(':{{ id }}', ${{ item }}->{{ id }}(), DB::{{ dbTypes[id] }});
{% elseif property.isBlameAt and property.isUa %}
        $query->setParameter(':{{ id }}', new \DateTime(date('Y-m-d H:i:s')), DB::{{ dbTypes[id] }});
{% endif %}
{% endfor %}

        $query->where('{{ properties[pkName].name }} = :{{ pkName }}');
        $query->setParameter(':{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        $query->execute();
    }
{% elseif action == 'delete' %}

    public function pop({{ entity }} ${{ item }}): void
    {
        $query = $this->conn->createQueryBuilder();

        $query->delete('`{{ table }}`');

        $query->where('{{ properties[pkName].name }} = :{{ pkName }}');
        $query->setParameter(':{{ pkName }}', ${{ item }}->{{ pkName }}(), DB::{{ dbTypes[pkName] }});

        $query->execute();
    }
{% elseif action == 'login' %}

    public function getBy(string $column, $value): array
    {
        $query = $this->conn->createQueryBuilder();

        $query->select([
{% for id, property in properties %}
            '{{ property.name }} as {{ id }}',
{% endfor %}
        ]);
        $query->from('`{{ table }}`');
        $query->where("{$column} = :column");
        $query->setParameter(':column', $value);

        return $query->execute()->fetch() ?: [];
    }
{% endif %}
{% endfor %}
{% for id,fkFn in fkFnsNoBlame %}

    public function filter{{ fkFn.fnPlural }}(Find{{ entity }}{{ fkFn.fnSingular }}Request $request, int $page, int $limit): array
    {
        $query = $this->conn->createQueryBuilder();

        $query->select([
            '{{ id }}.{{ fkFn.id }} as id',
            '{{ id }}.{{ fkFn.text }} as text',
        ]);
        $query->from('`{{ fkFn.table }}`', '`{{ id }}`');

        $query->where('{{ id }}.{{ fkFn.text }} like :{{ id }}_{{ fkFn.text }}');
        $query->setParameter(':{{ id }}_{{ fkFn.text }}', "%{$request->term}%");

        $query->setFirstResult($page ? ($page - 1) * $limit : 0);
        $query->setMaxResults($limit);

        return $query->execute()->fetchAll();
    }
{% endfor %}
}
