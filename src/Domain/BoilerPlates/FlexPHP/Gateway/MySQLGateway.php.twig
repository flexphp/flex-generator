<?php declare(strict_types=1);

namespace Domain\{{ entity }}\Gateway;

use Domain\{{ entity }}\{{ entity }};
use Domain\{{ entity }}\{{ entity }}Gateway;
use Doctrine\DBAL\Connection;

final class MySQL{{ entity }}Gateway implements {{ entity }}Gateway
{
    private $query;
    private $table = '{{ name }}';

    public function __construct(Connection $conn)
    {
        $this->query = $conn->createQueryBuilder();
    }
{% for action in actions %}
{% if action in ['index'] %}

    public function find(array $wheres, array $orders, int $limit): array
    {
        $this->query->select('*');
        $this->query->from($this->table);

        foreach($wheres as $column => $value) {
            if (!$value) {
                continue;
            }

            $this->query->where($column . ' = :' . $column);
            $this->query->setParameter($column, $value);
        }

        $this->query->setMaxResults($limit);

        return $this->query->execute()->fetchAll();
    }
{% elseif action in ['create'] %}

    public function push({{ entity }} ${{ item }}): void
    {
        $this->query->insert($this->table);

{% for id, property in properties %}
        $this->query->setValue('{{ id }}', ':{{ id }}');
{% endfor %}

{% for id, property in properties %}
{% if property.DataType|lower == 'datetime' %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}()->format('Y-m-d H:i:s'));
{% else %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}());
{% endif %}
{% endfor %}

        $this->query->execute();
    }
{% elseif action in ['read'] %}

    public function get({{ entity }} ${{ item }}): array
    {
        $this->query->select([
{% for id, property in properties %}
            '{{ property.Name }}' => '{{ id }}',
{% endfor %}
        ]);
        $this->query->from($this->table);
        $this->query->where('Id = :id');
        $this->query->setParameter('id', ${{ item }}->id());

        return $this->query->execute()->fetch();
    }
{% elseif action in ['update'] %}

    public function shift({{ entity }} ${{ item }}): void
    {
        $this->query->update($this->table);

{% for id, property in properties %}
        $this->query->set('{{ id }}', ':{{ id }}');
{% endfor %}

{% for id, property in properties %}
{% if property.DataType|lower == 'datetime' %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}()->format('Y-m-d H:i:s'));
{% else %}
        $this->query->setParameter(':{{ id }}', ${{ item }}->{{ id }}());
{% endif %}
{% endfor %}

        $this->query->where('Id = :id');
        $this->query->setParameter('id', ${{ item }}->id());

        $this->query->execute();
    }
{% elseif action in ['delete'] %}

    public function drop({{ entity }} ${{ item }}): void
    {
        $this->query->delete($this->table);

        $this->query->where('Id = :id');
        $this->query->setParameter('id', ${{ item }}->id());

        $this->query->execute();
    }
{% endif %}
{% endfor %}
}
