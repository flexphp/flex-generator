{% set useStatements = [] %}
{% set useStatements = useStatements|merge(['use Domain\\Helper\\FactoryExtendedTrait;']) %}
<?php declare(strict_types=1);
{{ header|raw }}
namespace Domain\{{ entity }};

{% for fkFn in fkFns %}
{% if fkFn.fnSingular != entity %}
{% set useStatements = useStatements|merge(['use Domain\\' ~ fkFn.fnSingular ~ '\\' ~ fkFn.fnSingular ~ 'Factory;']) %}
{% endif %}
{% endfor %}
{% if useStatements|length > 0 %}
{{ useStatements|sort|join("\n") }}

{% endif %}
final class {{ entity }}Factory
{
    use FactoryExtendedTrait;

    public function make($data): {{ entity }}
    {
        ${{ item }} = new {{ entity }}();

        if (\is_object($data)) {
            $data = (array)$data;
        }
{% for setter in setters %}

        if (isset($data['{{ setter.camel }}'])) {
{% if setter.typehint starts with '\\' %}
            ${{ item }}->set{{ setter.pascal }}(\is_string($data['{{ setter.camel }}']) ? new {{ setter.typehint }}($data['{{ setter.camel }}']) : $data['{{ setter.camel }}']);
{% else %}
            ${{ item }}->set{{ setter.pascal }}(({{ setter.typehint }})$data['{{ setter.camel }}']);
{% endif %}
        }
{% endfor %}
{% for fkRel in fkRels %}

        if (isset($data['{{ fkRel.pkName }}.{{ fkRel.id }}'])) {
            ${{ item }}->set{{ fkRel.pkNamePascal }}Instance((new {{ fkRel.fnSingular }}Factory())->make($this->getFkEntity('{{ fkRel.pkName }}.', $data)));
        }
{% endfor %}

        return ${{ item }};
    }
}
