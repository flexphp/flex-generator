<?php declare(strict_types=1);

namespace Domain\{{ entity }};
{% if fkFns %}

{% endif %}
{% for fkFn in fkFns %}
use Domain\{{ fkFn.fnSingular }}\{{ fkFn.fnSingular }}Factory;
{% endfor %}

final class {{ entity }}Factory
{
    public function make($data): {{ entity }}
    {
        ${{ item }} = new {{ entity }}();

        if (is_object($data)) {
            $data = (array)$data;
        }
{% if setters %}

{% for setter in setters %}
        if (isset($data['{{ setter.camel }}'])) {
{% if setter.typehint starts with '\\' %}
            ${{ item }}->set{{ setter.pascal }}(is_string($data['{{ setter.camel }}']) ? new {{ setter.typehint }}($data['{{ setter.camel }}']) : $data['{{ setter.camel }}']);
{% else %}
            ${{ item }}->set{{ setter.pascal }}(({{ setter.typehint }})$data['{{ setter.camel }}']);
{% endif %}
        }
{% endfor %}
{% endif %}
{% if fkRels %}

{% for fkRel in fkRels %}
        if (isset($data['{{ fkRel.pkName }}.{{ fkRel.id }}'])) {
            ${{ item }}->set{{ fkRel.pkNamePascal }}Instance((new {{ fkRel.fnSingular }}Factory())->make($this->getFkEntity('{{ fkRel.pkName }}.', $data)));
        }
{% endfor %}
{% endif %}

        return ${{ item }};
    }
{% if fkRels %}

    private function getFkEntity(string $prefix, array &$data): array
    {
        $data = [];

        \array_map(function (string $key, ?string $value) use ($prefix, &$data): void {
            if (\strpos($key, $prefix) !== false) {
                $data[\substr($key, \strlen($prefix))] = $value;
            }
        }, \array_keys($data), $data);

        return $data;
    }
{% endif %}
}
