<?php declare(strict_types=1);

namespace Domain\{{ entity }};

{% if fkRels|length > 0 %}
use App\Form\Type\Select2Type;
use Doctrine\DBAL\Connection;
{% for fkFn in fkFns %}
use Domain\{{ fkFn.fnSingular }}\UseCase\Read{{ fkFn.fnSingular }}UseCase;
use Domain\{{ fkFn.fnSingular }}\{{ fkFn.fnSingular }}Repository;
use Domain\{{ fkFn.fnSingular }}\Gateway\MySQL{{ fkFn.fnSingular }}Gateway;
use Domain\{{ fkFn.fnSingular }}\Request\Read{{ fkFn.fnSingular }}Request;
{% endfor %}
{% endif %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type as InputType;
use Symfony\Component\Form\FormBuilderInterface;
{% if fkRels|length > 0 %}
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
{% endif %}

final class {{ entity }}FormType extends AbstractType
{
{% if fkRels|length > 0 %}
    private $conn;
    private $router;

    public function __construct(Connection $conn, UrlGeneratorInterface $router)
    {
        $this->conn = $conn;
        $this->router = $router;
    }

{% endif %}
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
{% for id, fkRel in fkRels %}
{% if not properties[id].isBlameBy %}
        ${{ fkRel.pkName }}Modifier = function (FormInterface $form, ?{{ fkRel.typeHint }} $value) {
            $choices = null;

            if (!empty($value)) {
                $useCase = new Read{{ fkRel.fnSingular }}UseCase(new {{ fkRel.fnSingular }}Repository(new MySQL{{ fkRel.fnSingular }}Gateway($this->conn)));
                $response = $useCase->execute(new Read{{ fkRel.fnSingular }}Request($value));

                if ($response->{{ fkRel.item }}->{{ fkRel.id }}()) {
                    $choices = [$response->{{ fkRel.item }}->{{ fkRel.text }}() => $value];
                }
            }

            $form->add('{{ fkRel.pkName }}', Select2Type::class, [
                'label' => '{{ labels[fkRel.pkName] }}',
{% if properties[fkRel.pkName].isRequired %}
                'required' => true,
{% else %}
                'required' => false,
{% endif %}
                'attr' => [
                    'data-autocomplete-url' => $this->router->generate('{{ route }}.find.{{ fkRel.route }}'),
                ],
                'choices' => $choices,
                'data' => $value,
            ]);
        };

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) use (${{ fkRel.pkName }}Modifier) {
            if (!$event->getData()) {
                return null;
            }

            ${{ fkRel.pkName }}Modifier($event->getForm(), $event->getData()->{{ fkRel.pkName }}());
        });

        $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) use (${{ fkRel.pkName }}Modifier) {
            ${{ fkRel.pkName }}Modifier($event->getForm(), ({{ fkRel.typeHint }})$event->getData()['{{ fkRel.pkName }}'] ?? null);
        });

{% endif %}
{% endfor %}
{% for id, property in properties %}
{% if not property.isAi and not property.isBlame %}
{% if fkRels[id] %}
        $builder->add('{{ id }}', Select2Type::class, [
{% else %}
        $builder->add('{{ id }}', InputType\{{ inputs[id] }}Type::class, [
{% endif %}
            'label' => '{{ labels[id] }}',
{% if property.isRequired %}
            'required' => true,
{% else %}
            'required' => false,
{% endif %}
{% if property.Constraints|filter(v => v != 'required')|length > 0 %}
            'attr' => [
{% if fkRels[id] %}
                'data-autocomplete-url' => $this->router->generate('{{ route }}.find.{{ fkRels[id].route }}'),
{% endif %}
{% if property.minLength %}
                'minlength' => {{ property.minLength }},
{% endif %}
{% if property.maxLength %}
                'maxlength' => {{ property.maxLength }},
{% endif %}
{% if property.min %}
                'min' => {{ property.min }},
{% endif %}
{% if property.max %}
                'max' => {{ property.max }},
{% endif %}
            ],
{% if fkRels[id] %}
            'choices' => [],
{% endif %}
{% endif %}
{% if inputs[id] in ['Date', 'Time', 'DateTime'] %}
            'date_widget' => 'single_text',
            'time_widget' => 'single_text',
            'format' => 'Y-m-d H:i:s',
{% endif %}
        ]);
{% endif %}
{% endfor %}
    }
}
