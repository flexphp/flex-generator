{% set fkRelsNoBlame = fkRels|filter(v => not v.blameBy) %}
{% set useStatements = [] %}
{% set fkRelsUnique = {} %}
{% for fkRel in fkRelsNoBlame %}
{% if fkRel.fnSingular not in fkRelsUnique %}
{% set fkRelsUnique = fkRelsUnique|merge([fkRel.fnSingular]) %}
{% endif %}
{% endfor %}
<?php declare(strict_types=1);
{{ header|raw }}
namespace Domain\{{ entity }};

{% for id,property in properties %}
{% if not property.isBlameAt and inputs[id] ends with 'picker' %}
{% set name = 'use App\\Form\\Type\\' ~ inputs[id] ~ 'Type;' %}
{% if name not in useStatements %}
{% set useStatements = useStatements|merge([name]) %}
{% endif %}
{% endif %}
{% endfor %}
{% if fkRelsNoBlame %}
{% set useStatements = useStatements|merge(['use App\\Form\\Type\\Select2Type;']) %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\Form\\FormInterface;']) %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\Form\\FormEvent;']) %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\Form\\FormEvents;']) %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;']) %}
{% for fkFn in fkFns %}
{% if not properties[fkFn.pkName].isBlameBy %}
{% set useStatements = useStatements|merge(['use Domain\\' ~ fkFn.fnSingular ~ '\\UseCase\\Read' ~ fkFn.fnSingular ~ 'UseCase;']) %}
{% set useStatements = useStatements|merge(['use Domain\\' ~ fkFn.fnSingular ~ '\\Request\\Read' ~ fkFn.fnSingular ~ 'Request;']) %}
{% endif %}
{% endfor %}
{% endif %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\Form\\AbstractType;']) %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\Form\\Extension\\Core\\Type as InputType;']) %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\Form\\FormBuilderInterface;']) %}
{% set useStatements = useStatements|merge(['use Symfony\\Component\\OptionsResolver\\OptionsResolver;']) %}
{% if useStatements|length > 0 %}
{{ useStatements|sort|join("\n") }}
{% endif %}

final class {{ entity }}FormType extends AbstractType
{
{% if fkRelsNoBlame %}
{% for fkName in fkRelsUnique %}
    private {{ 'Read' ~ fkName ~ 'UseCase' }} ${{ 'read' ~ fkName ~ 'UseCase' }};

{% endfor %}
    private UrlGeneratorInterface $router;

    public function __construct(
{% for fkName in fkRelsUnique %}
        {{ 'Read' ~ fkName ~ 'UseCase' }} ${{ 'read' ~ fkName ~ 'UseCase' }},
{% endfor %}
        UrlGeneratorInterface $router
    ) {
{% for fkName in fkRelsUnique %}
        $this->{{ 'read' ~ fkName ~ 'UseCase' }} = ${{ 'read' ~ fkName ~ 'UseCase' }};
{% endfor %}
        $this->router = $router;
    }

{% endif %}
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
{% for id, fkRel in fkRelsNoBlame %}
        ${{ fkRel.pkName }}Modifier = function (FormInterface $form, ?{{ fkRel.typeHint }} $value): void {
            $choices = null;

            if (!empty($value)) {
                $response = $this->read{{ fkRel.fnSingular }}UseCase->execute(new Read{{ fkRel.fnSingular }}Request($value));

                if ($response->{{ fkRel.item }}->{{ fkRel.id }}()) {
                    $choices = [$response->{{ fkRel.item }}->{{ fkRel.text }}() => $value];
                }
            }

            $form->add('{{ fkRel.pkName }}', Select2Type::class, [
                'label' => 'label.{{ fkRel.pkName }}',
{% if properties[fkRel.pkName].isRequired %}
                'required' => true,
{% else %}
                'required' => false,
{% endif %}
                'attr' => [
                    'data-autocomplete-url' => $this->router->generate('{{ route }}.find.{{ fkRel.route }}'),
                ],
                'choices' => $choices,
                'data' => $value,
            ]);
        };

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) use (${{ fkRel.pkName }}Modifier) {
            if (!$event->getData()) {
                return null;
            }

            ${{ fkRel.pkName }}Modifier($event->getForm(), $event->getData()->{{ fkRel.pkName }}());
        });

        $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) use (${{ fkRel.pkName }}Modifier): void {
            ${{ fkRel.pkName }}Modifier($event->getForm(), ({{ fkRel.typeHint }})$event->getData()['{{ fkRel.pkName }}'] ?: null);
        });

{% endfor %}
{% for id, property in properties %}
{% if not property.isAi and not property.isBlame %}
{% if fkRelsNoBlame[id] %}
        $builder->add('{{ id }}', Select2Type::class, [
{% elseif inputs[id] ends with 'picker' %}
        $builder->add('{{ id }}', {{ inputs[id] }}Type::class, [
{% else %}
        $builder->add('{{ id }}', InputType\{{ inputs[id] }}Type::class, [
{% endif %}
            'label' => 'label.{{ id }}',
{% if property.isRequired %}
            'required' => true,
{% else %}
            'required' => false,
{% endif %}
{% if property.constraints|keys|filter(v => v not in ['required', 'type', 'pk', 'trim', 'fchars', 'filter', 'format', 'show', 'hide', 'fkcheck', 'link', 'default'])|length > 0 %}
            'attr' => [
{% if fkRelsNoBlame[id] %}
                'data-autocomplete-url' => $this->router->generate('{{ route }}.find.{{ fkRelsNoBlame[id].route }}'),
{% endif %}
{% if property.minLength %}
                'minlength' => {{ property.minLength }},
{% endif %}
{% if property.maxLength %}
                'maxlength' => {{ property.maxLength }},
{% endif %}
{% if property.min %}
                'min' => {{ property.min }},
{% endif %}
{% if property.max %}
                'max' => {{ property.max }},
{% endif %}
            ],
{% endif %}
{% if inputs[id] in ['Date', 'Time', 'DateTime'] %}
            'date_widget' => 'single_text',
            'time_widget' => 'single_text',
            'format' => 'Y-m-d H:i:s',
{% endif %}
        ]);
{% endif %}
{% endfor %}
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'translation_domain' => '{{ item }}',
        ]);
    }
}
