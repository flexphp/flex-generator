{% if constraints|length > 0 %}
    private function {{ property }}(): array
    {
        return [
{% if constraints.required %}
            new Assert\NotNull(),
            new Assert\NotBlank(),
{% endif %}
{% if constraints.length or constraints.minlength or constraints.maxlength %}
            new Assert\Length([
{% if constraints.length.min or constraints.minlength %}
                'min' => {{ constraints.length.min }}{{ constraints.minlength }},
{% endif %}
{% if constraints.length.max or constraints.maxlength %}
                'max' => {{ constraints.length.max }}{{ constraints.maxlength }},
{% endif %}
            ]),
{% endif %}
{% if constraints.check or constraints.mincheck or constraints.maxcheck %}
            new Assert\Count([
{% if constraints.check.min or constraints.mincheck %}
                'min' => {{ constraints.check.min }}{{ constraints.mincheck }},
{% endif %}
{% if constraints.check.max or constraints.maxcheck %}
                'max' => {{ constraints.check.max }}{{ constraints.maxcheck }},
{% endif %}
            ]),
{% endif %}
{% if constraints.min %}
            new Assert\LessThanOrEqual([
                'value' => {{ constraints.min }},
            ]),
{% endif %}
{% if constraints.max %}
            new Assert\GreaterThanOrEqual([
                'value' => {{ constraints.max }},
            ]),
{% endif %}
{% if constraints.equalto %}
            new Assert\EqualTo([
                'value' => '{{ constraints.equalto }}',
            ]),
{% endif %}
{% if constraints.pattern %}
            new Assert\Regex([
                'pattern' => '/^[a-z_]*$/',
            ]),
{% endif %}
{% if constraints.type %}
{% if constraints.type.datetime %}
            new Assert\DateTime(),
{% else %}
            new Assert\Type([
                'type' => '{{ constraints.type }}',
            ]),
{% endif %}
{% endif %}
        ];
    }
{% endif %}