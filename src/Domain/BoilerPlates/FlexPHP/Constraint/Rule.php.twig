    public function {{ property }}(array $constraints = [])
    {
        return $this->getValidator()->validate(__FUNCTION__, array_merge([
{% for constraint, param in constraints %}
{% if constraint == 'required' %}
            new NotNull(),
            new NotBlank(),
{% elseif constraint in ['length', 'minlength', 'maxlength'] %}
            new Length([
{% if param.min or constraints.minlength %}
                'min' => {{ param.min }}{{ constraints.minlength }},
{% endif %}
{% if param.max or constraints.maxlength %}
                'max' => {{ param.max }}{{ constraints.maxlength }},
{% endif %}
            ]),
{% elseif constraint in ['check', 'mincheck', 'maxcheck'] %}
            new Count([
{% if param.min or constraints.mincheck %}
                'min' => {{ param.min }}{{ constraints.mincheck }},
{% endif %}
{% if param.max or constraints.maxcheck %}
                'max' => {{ param.max }}{{ constraints.maxcheck }},
{% endif %}
            ]),
{% elseif constraint == 'min' %}
            new LessThanOrEqual([
                'value' => {{ constraints.min }},
            ]),
{% elseif constraint == 'max' %}
            new GreaterThanOrEqual([
                'value' => {{ constraints.max }},
            ]),
{% elseif constraint == 'equalto' %}
            new EqualTo([
                'value' => '{{ constraints.equalto }}',
            ]),
{% elseif constraint == 'pattern' %}
            new Regex([
                'pattern' => '/^[a-z_]*$/',
            ]),
{% elseif constraint == 'type' %}
{% if constraint == 'datetime' %}
            new DateTime(),
{% else %}
            new Type([
                'type' => '{{ constraints.type }}',
            ]),
{% endif %}
{% endif %}
{% endfor %}
        ], $constraints));
    }
