    public function {{ property }}(array $constraints = [])
    {
        return $this->getValidator()->validate(__FUNCTION__, array_merge([
{% if constraints.required %}
            new NotNull(),
            new NotBlank(),
{% endif %}
{% if constraints.length or constraints.minlength or constraints.maxlength %}
            new Length([
{% if constraints.length.min or constraints.minlength %}
                'min' => {{ constraints.length.min }}{{ constraints.minlength }},
{% endif %}
{% if constraints.length.max or constraints.maxlength %}
                'max' => {{ constraints.length.max }}{{ constraints.maxlength }},
{% endif %}
            ]),
{% endif %}
{% if constraints.check or constraints.mincheck or constraints.maxcheck %}
            new Count([
{% if constraints.check.min or constraints.mincheck %}
                'min' => {{ constraints.check.min }}{{ constraints.mincheck }},
{% endif %}
{% if constraints.check.max or constraints.maxcheck %}
                'max' => {{ constraints.check.max }}{{ constraints.maxcheck }},
{% endif %}
            ]),
{% endif %}
{% if constraints.min %}
            new LessThanOrEqual([
                'value' => {{ constraints.min }},
            ]),
{% endif %}
{% if constraints.max %}
            new GreaterThanOrEqual([
                'value' => {{ constraints.max }},
            ]),
{% endif %}
{% if constraints.equalto %}
            new EqualTo([
                'value' => '{{ constraints.equalto }}',
            ]),
{% endif %}
{% if constraints.pattern %}
            new Regex([
                'pattern' => '/^[a-z_]*$/',
            ]),
{% endif %}
{% if constraints.type %}
{% if constraints.type.datetime %}
            new DateTime(),
{% else %}
            new Type([
                'type' => '{{ constraints.type }}',
            ]),
{% endif %}
{% endif %}
        ], $constraints));
    }