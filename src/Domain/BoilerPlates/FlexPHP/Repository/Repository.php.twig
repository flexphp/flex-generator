{% set fkFnsNoBlame = fkFns|filter(v => not v.blameBy) %}
{% set useStatements = [] %}
<?php declare(strict_types=1);

namespace Domain\{{ entity }};

{% for request in requests %}
{% if request in ['Index', 'Create', 'Read', 'Update', 'Delete', 'Login'] %}
{% set useStatements = useStatements|merge(['use Domain\\' ~ entity ~ '\\Request\\' ~ request ~ entity ~ 'Request;']) %}
{% endif %}
{% endfor %}
{% for id,fkFn in fkFnsNoBlame %}
{% set useStatements = useStatements|merge(['use Domain\\' ~ entity ~ '\\Request\\Find' ~ entity ~ fkFn.fnSingular ~ 'Request;']) %}
{% endfor %}
{% if useStatements|length > 0 %}
{{ useStatements|sort|join("\n") }}
{% endif %}
use FlexPHP\Repositories\Repository;

/**
 * @method {{ entity }}Gateway getGateway
 */
final class {{ entity }}Repository extends Repository
{
{% for index, action in actions %}
{% if action == 'index' %}
    public function findBy(Index{{ entity }}Request $request): array
    {
        return array_map(function (array ${{ item }}) {
            return (new {{ entity }}Factory())->make(${{ item }});
        }, $this->getGateway()->search((array)$request, [], $request->page, 50, $request->offset));
    }
{% elseif action == 'create' %}
    public function add(Create{{ entity }}Request $request): {{ entity }}
    {
        ${{ item }} = (new {{ entity }}Factory())->make($request);

        ${{item }}->set{{ pkName }}($this->getGateway()->push(${{ item }}));

        return ${{ item }};
    }
{% elseif action == 'read' %}
    public function getById(Read{{ entity }}Request $request): {{ entity }}
    {
        $factory = new {{ entity }}Factory();
        $data = $this->getGateway()->get($factory->make($request));

        return $factory->make($data);
    }
{% elseif action == 'update' %}
    public function change(Update{{ entity }}Request $request): {{ entity }}
    {
        ${{ item }} = (new {{ entity }}Factory())->make($request);

        $this->getGateway()->shift(${{ item }});

        return ${{ item }};
    }
{% elseif action == 'delete' %}
    public function remove(Delete{{ entity }}Request $request): {{ entity }}
    {
        $factory = new {{ entity }}Factory();
        $data = $this->getGateway()->get($factory->make($request));

        ${{ item }} = $factory->make($data);

        $this->getGateway()->pop(${{ item }});

        return ${{ item }};
    }
{% elseif action == 'login' %}
    public function getByLogin(Login{{ entity }}Request $request): {{ entity }}
    {
        $data = $this->getGateway()->getBy('{{ login }}', $request->{{ login }});

        return (new {{ entity }}Factory())->make($data);
    }
{% endif %}
{% if not loop.last and actions[index + 1] in ['index', 'create', 'read', 'update', 'delete', 'login'] %}

{% endif %}
{% endfor %}
{% for id,fkFn in fkFnsNoBlame %}

    public function find{{ fkFn.fnPlural }}By(Find{{ entity }}{{ fkFn.fnSingular }}Request $request): array
    {
        return $this->getGateway()->filter{{ fkFn.fnPlural }}($request, $request->page, 20, $request->offset);
    }
{% endfor %}
}
