<?php declare(strict_types=1);
/*
 * This file is part of FlexPHP.
 *
 * (c) Freddie Gar <freddie.gar@outlook.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Domain\Tests;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase as FrameworkTestCase;

abstract class TestCase extends FrameworkTestCase
{
    use DatabaseTrait;

    public function setUp(): void
    {
        parent::setUp();

        $this->createDb();

        $this->connection()->beginTransaction();
    }

    public function tearDown(): void
    {
        if ($this->connection()->isTransactionActive()) {
            $this->connection()->rollBack();
        }

        parent::tearDown();
    }

    protected function getSpy(string $className, array $args = [], bool $enableProxy = true): MockObject
    {
        if (!$enableProxy) {
            return $this->getMockBuilder($className)
                ->setConstructorArgs($args)
                ->getMock();
        }

        return $this->getMockBuilder($className)
            ->setConstructorArgs($args)
            ->enableProxyingToOriginalMethods()
            ->getMock();
    }

    protected function getXRequest(X $x, array $exclude = [], array $include = []): array
    {
        return $this->applyChanges([
            'id' => $x->id(),
        ], $exclude, $include);
    }

    protected function xRepository(xGateway $gateway = null): xRepository
    {
        if (!$gateway) {
            $class = $this->getGateway(xGateway::class);
            $gateway = new $class($this->connection());
        }

        return new xRepository($gateway);
    }

    private function applyChanges(array $original, array $exclude, array $include): array
    {
        if (\count($exclude) > 0) {
            $original = \array_diff_key($original, \array_flip($exclude));
        }

        return $include + $original;
    }
}
