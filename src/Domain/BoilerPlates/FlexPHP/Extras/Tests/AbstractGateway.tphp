<?php declare(strict_types=1);

namespace Domain\Tests;

use DateTime;
use Domain\Tests\User\Gateway\TestUserGateway;
use Domain\User\UserFactory;
use ReflectionClass;

abstract class AbstractGateway
{
    private static $registers = [];

    protected function _search(array $wheres): array
    {
        self::init();
        $registers = [];
        $filters = array_diff_key(array_filter($wheres), array_flip(['page']));

        foreach (self::$registers[static::class] as $register) {
            $skip = false;

            foreach ($filters as $name => $value) {
                if (property_exists($register, $name) && $register->{$name}() !== $value) {
                    $skip = true;
                }
            }

            if ($skip) {
                continue;
            }

            $registers[] = self::objectToArray($register);
        }

        return $registers;
    }

    protected function _pushInt($entity): int
    {
        self::init();

        $id = \count(self::$registers[static::class]) + 1;
        $entity->setId($id);

        self::$registers[static::class][$id] = self::injectCreatedBy($entity);

        return $id;
    }

    protected function _pushString($entity): string
    {
        $id = $entity->id();
        $entity->setCreatedAt(new DateTime());
        $entity->setUpdatedAt(new DateTime());

        self::$registers[static::class][$id] = self::injectCreatedBy($entity);

        return $id;
    }

    protected function _get($entity): array
    {
        if (isset(self::$registers[static::class][$entity->id()])) {
            return self::objectToArray(self::$registers[static::class][$entity->id()]);
        }

        return [];
    }

    public function _shift($entity): void
    {
        if (isset(self::$registers[static::class][$entity->id()])) {
            $entity = self::injectCreatedBy($entity);
            $entity = self::injectUpdatedBy($entity);

            self::$registers[static::class][$entity->id()] = $entity;
        }
    }

    public function _pop($entity): void
    {
        if (isset(self::$registers[static::class][$entity->id()])) {
            unset(self::$registers[static::class][$entity->id()]);
        }
    }

    public static function init(): void
    {
        if (!isset(self::$registers[static::class])) {
            self::$registers[static::class] = [];
        }
    }

    public static function seed($register): void
    {
        self::$registers[static::class][$register->id()] = self::injectCreatedBy($register);
    }

    public static function reset(): void
    {
        self::$registers = [];
    }

    private static function objectToArray($obj, string $prefix = '')
    {
        $rfc = new ReflectionClass(get_class($obj));

        $arr = array();

        foreach ($rfc->getProperties() as $prop) {
            $prop->setAccessible(true);

            $name = (!empty($prefix) ? $prefix . '.' : $prefix) . $prop->getName();
            $arr[$name] = $value = $prop->getValue($obj);

            if ($value instanceof DateTime) {
                $arr[$name] = $value->format('Y-m-d H:i:s');
            } else if (is_object($value) && strpos($prop->getName(), 'Instance') !== false) {
                $instance = substr($prop->getName(), 0, -8);
                $arr = $arr + self::objectToArray($value, $instance);
                unset($arr[$prop->getName()]);
            }

            $prop->setAccessible(false);
        }

        return $arr;
    }

    private static function injectCreatedBy($entity)
    {
        if (method_exists($entity, 'createdBy')
            && method_exists($entity, 'setCreatedByInstance')
            && $entity->createdBy()
        ) {
            $entity->setCreatedAt(new DateTime());
            $entity->setCreatedByInstance((new UserFactory())->make(
                (new TestUserGateway())->get((new UserFactory())->make([
                    'id' => $entity->createdBy(),
                ])),
            ));
        }

        return $entity;
    }

    private static function injectUpdatedBy($entity)
    {
        if (method_exists($entity, 'updatedBy')
            && method_exists($entity, 'setUpdatedByInstance')
            && $entity->updatedBy()
        ) {
            $entity->setUpdatedAt(new DateTime());
            $entity->setUpdatedByInstance((new UserFactory())->make(
                (new TestUserGateway())->get((new UserFactory())->make([
                    'id' => $entity->updatedBy(),
                ])),
            ));
        }

        return $entity;
    }
}
